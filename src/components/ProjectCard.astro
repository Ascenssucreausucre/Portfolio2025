---
import AnimateTags from "./AnimateTags.astro";
import TechTag from "./TechTag.astro";

interface Props {
  title: string;
  image: string;
  description: string;
  tech: Array<string>;
  date: Date;
  actions: { github?: string; demo?: string };
  desktop?: string;
  mobile?: string;
}

// On ajoute éventuellement des valeurs par défaut
const {
  title,
  image,
  description,
  actions,
  tech,
  date,
  desktop = undefined,
  mobile = undefined,
} = Astro.props as Props;
---

<article class="project-card">
  {
    desktop && mobile ? (
      <div class="images-container">
        {" "}
        <img src={desktop} alt="Desktop example" class="desktop" />
        <img src={mobile} alt="Mobile example" class="mobile" />
      </div>
    ) : (
      <img src={image} alt={title} />
    )
  }
  <div class="content">
    <h3>{title}</h3>
    <p>{description}</p>
    <div class="date">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="#ffffff"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-calendar-icon lucide-calendar"
        ><path d="M8 2v4"></path><path d="M16 2v4"></path><rect
          width="18"
          height="18"
          x="3"
          y="4"
          rx="2"></rect><path d="M3 10h18"></path></svg
      ><span
        >{
          date
            .toLocaleDateString("fr-FR", {
              year: "numeric",
              month: "long",
            })
            .replace(/_/g, " ")
            .replace(/\b\w/g, (char) => char.toUpperCase())
        }</span
      >
    </div>
    <AnimateTags slugs={tech} />
    <!-- <ul>
      {
        tech.map((techno) => (
          <li>
            <TechTag slug={techno} />
          </li>
        ))
      }
    </ul> -->
    <div class="button-container">
      {
        actions?.demo && (
          <a href={actions.demo} class="button" target="_blank">
            Voir le site
          </a>
        )
      }
      {
        actions?.github && (
          <a href={actions.github} target="_blank" class="button">
            <img src="/assets/img/medias/github.png" alt="Lien GitHub" />
          </a>
        )
      }
    </div>
  </div>
</article>

<style>
  .project-card {
    min-width: 80vw;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 2rem;
    color: white;
    padding: 1rem;
    border-radius: 15px;
    scroll-snap-align: center;
    flex-wrap: wrap;
  }
  .project-card > img {
    max-width: 40%;
    aspect-ratio: 9/16;
    object-fit: cover;
    min-width: 200px;
    margin: auto;
  }
  .project-card img {
    border-radius: 15px;
    filter: drop-shadow(0 0 5px rgba(0, 0, 0, 0.5));
    transition:
      scale 1s cubic-bezier(0.075, 0.82, 0.165, 1),
      opacity 0.3s ease;
  }
  .images-container {
    position: relative;
    width: clamp(200px, 100%, 700px);
    aspect-ratio: 13/9;
  }
  .images-container > img.desktop {
    height: 80%;
    aspect-ratio: 16/9;
    object-fit: cover;
    position: absolute;
    z-index: 10;
    bottom: 0;
  }
  .images-container > img.mobile {
    height: 95%;
    /* max-width: 65%; */
    position: absolute;
    z-index: 15;
    left: clamp(10px, 5vw - 1rem, 30px);
  }

  /* Le conteneur n’applique la transparence que SI une image est réellement survolée */
  .images-container:has(img:hover) img:not(:hover) {
    opacity: 0.5;
    filter: blur(5px);
    scale: 0.95;
  }

  /* l’image sous le curseur reste à 1 (au cas où une règle ci‑dessus l’atteindrait) */
  .images-container img:hover {
    scale: 1.05;
    opacity: 1;
    z-index: 20;
  }

  .content {
    flex: 1;
    min-width: 150px;
    max-width: 750px;
  }

  .content > p {
    margin-block: 0.25rem;
  }
  .date {
    font-weight: 900;
  }
  .date svg {
    margin-right: 0.25rem;
    stroke-width: 2px;
  }

  .button-container img {
    filter: invert();
  }
  ul {
    padding-block: 0.5rem;
    list-style-type: none;
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
</style>
